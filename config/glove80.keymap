/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3


// #define DEFAULT 0
#define GAM 1
#define LWR 2
#define ADJ 3

// &mt {
//     tapping-term-ms = <150>;
// };


/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

        default_layer {
            bindings = <
       &kp F1         &kp F2   &kp F3    &kp F4     &kp F5                                                                                               &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
       &gresc         &kp N1   &kp N2    &kp N3     &kp N4    &kp N5                                                                             &kp N6  &kp N7     &kp N8    &kp N9    &kp N0    &kp EQUAL
       &kp TAB        &kp Q    &kp W     &kp E      &kp R     &kp T                                                                              &kp Y   &kp U      &kp I     &kp O     &kp P     &kp MINUS
       &kp LSHFT      &kp A    &kp S     &kp D      &kp F     &kp G                                                                              &kp H   &kp J      &kp K     &kp L     &kp SEMI  &mt RSHFT APOS
       &mo LWR        &kp Z    &kp X     &kp C      &kp V     &kp B  &mt LALT BSPC    &mt LCTRL BSPC  &none      &none    &kp BSPC  &kp BSPC     &kp N   &kp M      &kp COMMA &kp DOT   &kp FSLH  &mo LWR
       &magic MAGIC 0 &none    &kp PG_DN &kp PG_UP  &none            &mt LCMD SPACE   &mt LCTRL RET   &mo LWR    &mo LWR  &kp RET   &kp SPACE            &none      &kp LBKT  &kp RBKT  &none     &none
            >;
        };

    //     gaming_layer {
    //         bindings = <
    //    &kp F1         &kp F2          &kp F3          &kp F4           &kp F5                                                                    &kp F6   &kp F7     &kp F8    &kp F9    &kp F10
    //    &gresc         &kp N1          &kp N2          &kp N3           &kp N4      &kp N5                                                        &kp N6   &kp N7     &kp N8    &kp N9    &kp N0    &kp EQUAL
    //    &kp TAB        &kp N6          &kp Q           &kp W            &kp E       &kp R                                                         &kp Y    &kp U      &kp I     &kp O     &kp P     &kp MINUS
    //    &kp Y          &kp LSHFT       &kp A           &kp S            &kp D       &kp F                                                         &kp H    &kp J      &kp K     &kp L     &kp SEMI  &mt RSHFT APOS
    //    &kp U          &kp LCTRL       &kp Z           &kp X            &kp C       &kp V   &kp T     &kp G &none   &none    &kp RET   &kp BSPC   &kp N    &kp M      &kp COMMA &kp DOT   &kp FSLH  &mo LWR
    //    &none          &none           &kp N           &kp M            &none               &kp SPACE &kp B &mo LWR &mo LWR  &kp RET   &kp SPACE           &kp UP     &kp LBKT  &kp RBKT  &kp DOWN  &kp PG_DN
    //         >;
    //     };

    //     lower_layer {
    //         bindings = <
    //    &kp C_BRI_DN   &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                     &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP &none      &kp PAUSE_BREAK
    //    &kp TILDE      &kp F1            &kp F2          &kp F3             &kp F4           &kp F5                                                      &kp F6      &kp F7        &kp F8       &kp F9     &kp F10 &kp F11
    //    &trans         &kp C_PP          &kp C_PREV      &kp C_NEXT         &none            &kp END                                                     &trans      &trans        &trans       &kp F11    &kp F12 &kp BSLH
    //    &trans         &kp C_MUTE        &kp C_VOL_DN    &kp C_VOL_UP       &kp RIGHT_ARROW  &kp PG_UP                                                   &kp LEFT    &kp DOWN      &kp UP       &kp RIGHT  &kp KP_PLUS            &none
    //    &trans         &trans            &kp F14         &kp F15            &kp F12          &kp PG_DN  &mo ADJ &trans  &mo ADJ &mo ADJ &trans  &mo ADJ  &kp COMMA   &kp KP_N1     &kp KP_N2    &kp KP_N3  &kp KP_ENTER           &trans
    //    &none          &kp CAPS          &kp INS         &kp F11            &kp F12                     &trans  &trans  &trans  &trans  &kp DEL &trans               &kp KP_N0     &kp KP_N0    &kp KP_DOT &kp KP_ENTER           &trans
    //         >;
    //     };

    //     adjust_layer {
    //         bindings = <
    //    &none     &none &none        &none      &none                                                                                    &none            &none            &none            &none           &bt BT_CLR_ALL
    //    &none     &bt_0 &bt_1        &bt_2      &bt_3      &none                                                         &none           &none            &none            &none            &none           &none
    //    &none     &none &out OUT_BLE &none      &reset     &none                                                         &rgb_ug RGB_SPI &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG &none
    //    &none     &none &out OUT_USB &none      &none      &none                                                         &rgb_ug RGB_SPD &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF &none
    //    &tog GAM  &none &none        &bt BT_CLR &none      &bootloader   &none   &none  &none   &none   &none   &none    &bootloader     &none            &none            &none            &none           &reset
    //    &tog GAM  &none &none        &none      &none                    &none   &none  &none   &none   &none   &none                    &none            &none            &none            &none           &none
    //         >;
    //     };

        // factory_test_layer {
        //     bindings = <
        //     &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
        //     &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
        //     &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
        //     &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
        //     &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
        //     &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
        //     >;
        // };
    };
};
